#!/bin/bash

# Define the API endpoint and the PokÃ©mon name
API_URL="https://pokeapi.co/api/v2/pokemon"
POKEMON="pikachu"

# Define the output and error files
OUTPUT_FILE="data.json"
ERROR_FILE="errors.txt"

# Make the API request and handle errors
response=$(curl -s -w "%{http_code}" -o "$OUTPUT_FILE" "$API_URL/$POKEMON")
http_status=$(echo "$response" | tail -c 3)

# Check the HTTP status code
if [ "$http_status" -ne 200 ]; then
  echo "Error: Failed to fetch data for $POKEMON. HTTP status: $http_status" >> "$ERROR_FILE"
  if [ -f "$OUTPUT_FILE" ]; then
    echo "Response body: $(cat $OUTPUT_FILE)" >> "$ERROR_FILE"
    rm -f "$OUTPUT_FILE"  # Remove partial output file if request fails
  fi
  exit 1
fi

# Remove the appended HTTP status code from the response file
truncate -s -3 "$OUTPUT_FILE"

# Extract specific data using jq
name=$(jq -r '.name' "$OUTPUT_FILE")
height=$(jq -r '.height' "$OUTPUT_FILE" | awk '{print $1 / 10}')
weight=$(jq -r '.weight' "$OUTPUT_FILE" | awk '{print $1 / 10}')
type=$(jq -r '.types[0].type.name' "$OUTPUT_FILE")

# Format weight and height
formatted_height=$(printf "%.1f" "$height")
formatted_weight=$(printf "%.1f" "$weight")

# Format the output using sed for capitalization
output_string="$name is of type $type, weighs ${formatted_weight}kg, and is ${formatted_height}m tall."
output_string=$(echo "$output_string" | sed 's/^./\U&/')

# Print the result
echo "$output_string"

# Success message
echo "Data for $POKEMON successfully saved to $OUTPUT_FILE."
