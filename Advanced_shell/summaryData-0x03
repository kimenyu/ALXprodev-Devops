#!/bin/bash

# Define the API endpoint
API_URL="https://pokeapi.co/api/v2/pokemon"

# Define the list of Pokémon
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Define the error file
ERROR_FILE="errors.txt"

# Loop through each Pokémon in the list
for POKEMON in "${POKEMON_LIST[@]}"; do
  # Define the output file for each Pokémon
  OUTPUT_FILE="${POKEMON}.json"

  # Make the API request and handle errors
  response=$(curl -s -w "%{http_code}" -o "$OUTPUT_FILE" "$API_URL/$POKEMON")
  http_status=$(echo "$response" | tail -c 3)

  # Check the HTTP status code
  if [ "$http_status" -ne 200 ]; then
    echo "Error: Failed to fetch data for $POKEMON. HTTP status: $http_status" >> "$ERROR_FILE"
    echo "Response body: $(cat $OUTPUT_FILE)" >> "$ERROR_FILE"
    rm -f "$OUTPUT_FILE"  # Remove partial output file if request fails
    continue
  fi

  # Remove the status code appended to the output file
  truncate -s -3 "$OUTPUT_FILE"

  # Success message
  echo "Data for $POKEMON successfully saved to $OUTPUT_FILE."

  # Add a delay to handle rate-limiting
  sleep 1

done

# Generate a CSV report
REPORT_FILE="pokemon_report.csv"
echo "Name,Height (m),Weight (kg)" > "$REPORT_FILE"

# Process each JSON file
for POKEMON in "${POKEMON_LIST[@]}"; do
  OUTPUT_FILE="${POKEMON}.json"
  if [ -f "$OUTPUT_FILE" ]; then
    NAME=$(jq -r '.name' "$OUTPUT_FILE")
    HEIGHT=$(jq -r '.height' "$OUTPUT_FILE" | awk '{print $1 / 10}')
    WEIGHT=$(jq -r '.weight' "$OUTPUT_FILE" | awk '{print $1 / 10}')
    echo "$NAME,$HEIGHT,$WEIGHT" >> "$REPORT_FILE"
  fi
done

# Calculate averages using awk
AVERAGES=$(awk -F, 'NR > 1 { height += $2; weight += $3; count++ } END { print height / count, weight / count }' "$REPORT_FILE")
AVG_HEIGHT=$(echo "$AVERAGES" | awk '{print $1}')
AVG_WEIGHT=$(echo "$AVERAGES" | awk '{print $2}')

# Format the output using sed
FORMATTED_OUTPUT=$(echo "Average Height: ${AVG_HEIGHT}m, Average Weight: ${AVG_WEIGHT}kg." | sed 's/^./\U&/')

# Print the formatted output
echo "$FORMATTED_OUTPUT"
